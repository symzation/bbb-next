// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String?  @unique
  client    String?
  image     String?
  isActive  Boolean  @default(true)
  role      String   @default("USER") // USER, ADMIN, AUTHOR
  /**
   * author    Author?  @relation(fields: [authorId], references: [id])
   * authorId  Int?
   * sessions      Session[]
   * posts         Post[]
   * comments      Comment[]
   */
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

/**
 * model Author {
 * id        Int      @id @default(autoincrement())
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * name      String
 * bio       String?
 * image     String?
 * User      User[]
 * userId    Int      @unique
 * posts         Post[]
 * }
 */

/**
 * model Session {
 * id           Int       @id @default(autoincrement())
 * createdAt    DateTime  @default(now())
 * updatedAt    DateTime  @updatedAt
 * expires      DateTime
 * sessionToken String    @unique
 * userId       Int
 * user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
 * }
 */

/**
 * model Post {
 * id            Int       @id @default(autoincrement())
 * createdAt     DateTime  @default(now())
 * updatedAt     DateTime  @updatedAt
 * title         String
 * content       String
 * published     Boolean   @default(false)
 * authorId      Int
 * author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
 * comments      Comment[]
 * }
 */

/**
 * model Comment {
 * id            Int       @id @default(autoincrement())
 * createdAt     DateTime  @default(now())
 * updatedAt     DateTime  @updatedAt
 * content       String
 * authorId      Int
 * postId        Int
 * author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
 * post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
 * }
 */

/**
 * model Shop {
 * id        Int      @id @default(autoincrement())
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * name      String
 * address   String?
 * city      String?
 * state     String?
 * zip       String?
 * country   String?
 * website   String?
 * phone     String?
 * email     String?
 * // reviews   Review[]
 * }
 */
